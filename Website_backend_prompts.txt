Here are some backend prompts for a static website built using HTML, CSS, and JavaScript with local storage as the database:

1. Create a new route for handling user requests related to the cloths website:
```javascript
app.get('/cloths', (req, res) => {
  // Handle request logic here
});
```
2. Set up the express server and import required dependencies:
```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json());
app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
```
3. Implement a route to handle saving cloth data into local storage:
```javascript
let clothesData = [];
const saveClothesData = (clothData) => {
  clothesData = clothData;
  localStorage.setItem('clothes', JSON.stringify(clothesData));
};
app.post('/saveClothData', (req, res) => {
  const newClothData = req.body;
  saveClothesData(newClothData);
  res.status(201).send('Cloth data saved successfully');
});
```
4. Implement a route to handle retrieving cloth data from local storage:
```javascript
app.get('/getClothData', (req, res) => {
  const clothesFromLocalStorage = JSON.parse(localStorage.getItem('clothes'));
  res.json(clothesFromLocalStorage || []);
});
```
5. Implement a route to handle deleting cloth data from local storage by id:
```javascript
app.delete('/deleteCloth/:id', (req, res) => {
  const clothesData = JSON.parse(localStorage.getItem('clothes'));
  const idToDelete = parseInt(req.params.id);
  const updatedClothsData = clothesData.filter((cloth) => cloth.id !== idToDelete);
  saveClothesData(updatedClothsData);
  res.status(200).send('Cloth data deleted successfully');
});
```
Note: This answer assumes a basic understanding of Node.js and Express.js for handling the backend logic. The frontend implementation using HTML, CSS, and JavaScript with local storage as the database is not covered in this answer.